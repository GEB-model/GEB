name: Ruff Error Count Check

on:
  pull_request:
    branches:
      - main

jobs:
  check-ruff-errors:
    runs-on: ubuntu-latest
    env:
      RULES: ANN001,ANN002,ANN003,ANN201,ANN202,ANN204,ANN205,ANN206,D102,D103,D100,D107,D105,D101,D104,D102,D103,D105,D107,D100,D101,D104,D102,D103,D105,D107,D100,D101,D104,DOC201,DOC202,DOC402,DOC501,DOC502,ANN003,ANN205,ANN206
    steps:
      - name: Checkout main branch for baseline
        uses: actions/checkout@v3
        with:
          ref: main
          path: main-branch

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          path: pr-branch

      - name: Install Ruff
        uses: astral-sh/ruff-action@v3
        with:
          args: "--version"

      - name: Detect changed Python files
        id: changed_files
        run: |
          # Use filesystem comparison between checked out branches to find changed Python files
          echo "Comparing Python files between main-branch and pr-branch directories..."
          
          # Find all Python files in both directories
          find main-branch -name "*.py" -type f | sed 's|^main-branch/||' | sort > main_files.txt
          find pr-branch -name "*.py" -type f | sed 's|^pr-branch/||' | sort > pr_files.txt
          
          # Find files that are different (new, modified, or only in PR)
          changed_files=""
          
          # Check files that exist in PR branch
          while IFS= read -r file; do
            if [ -f "main-branch/$file" ]; then
              # File exists in both, check if different
              if ! diff -q "main-branch/$file" "pr-branch/$file" >/dev/null 2>&1; then
                changed_files="$changed_files$file"$'\n'
              fi
            else
              # New file in PR
              changed_files="$changed_files$file"$'\n'
            fi
          done < pr_files.txt
          
          echo "Changed Python files in this PR:"
          echo "$changed_files"
          
          # Save to file, filtering out empty lines
          echo "$changed_files" | grep -v '^$' > changed_python_files.txt || touch changed_python_files.txt
          
          # Count actual files
          file_count=$(wc -l < changed_python_files.txt 2>/dev/null || echo "0")
          echo "Valid changed Python files found: $file_count"
          cat changed_python_files.txt || true
          echo "files_exist=$([ "$file_count" -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Run ruff on main (capture per-file, per-rule counts)
        id: ruff_main
        run: |
          set -o pipefail
          cd main-branch
          # Run ruff and extract per-file, per-rule counts
          ruff check --preview --select "${RULES}" --output-format full . 2>&1 | tee ruff_main_full.txt || true
          
          # Extract file-rule combinations: "FILE:LINE:COL: RULE message" -> "FILE RULE 1"
          # Then aggregate by FILE and RULE to get counts
          awk -F: '/^[^:]+:[0-9]+:[0-9]+: [A-Z0-9_]+/ {
            gsub(/^[ \t]+|[ \t]+$/, "", $4); 
            split($4, parts, " "); 
            rule = parts[1]; 
            print $1" "rule" 1"
          }' ruff_main_full.txt | awk '{
            key = $1" "$2; 
            count[key] += $3
          } END {
            for (k in count) print k" "count[k]
          }' > ruff_main_file_rule_counts.txt || true
          
          echo "file_rule_counts=main-branch/ruff_main_file_rule_counts.txt" >> $GITHUB_OUTPUT

      - name: Run ruff on PR (capture per-file, per-rule counts)
        id: ruff_pr
        run: |
          set -o pipefail
          cd pr-branch
          ruff check --preview --select "${RULES}" --output-format full . 2>&1 | tee ruff_pr_full.txt || true
          
          # Extract per-file, per-rule counts using same logic as main branch
          awk -F: '/^[^:]+:[0-9]+:[0-9]+: [A-Z0-9_]+/ {
            gsub(/^[ \t]+|[ \t]+$/, "", $4); 
            split($4, parts, " "); 
            rule = parts[1]; 
            print $1" "rule" 1"
          }' ruff_pr_full.txt | awk '{
            key = $1" "$2; 
            count[key] += $3
          } END {
            for (k in count) print k" "count[k]
          }' > ruff_pr_file_rule_counts.txt || true
          
          echo "file_rule_counts=pr-branch/ruff_pr_file_rule_counts.txt" >> $GITHUB_OUTPUT

      - name: Identify files with new errors per rule and display targeted errors
        run: |
          MAIN_FILE_RULE_COUNTS="main-branch/ruff_main_file_rule_counts.txt"
          PR_FILE_RULE_COUNTS="pr-branch/ruff_pr_file_rule_counts.txt"
          CHANGED_FILES="changed_python_files.txt"

          # Ensure count files exist to avoid errors
          [ -f "$MAIN_FILE_RULE_COUNTS" ] || touch "$MAIN_FILE_RULE_COUNTS"
          [ -f "$PR_FILE_RULE_COUNTS" ] || touch "$PR_FILE_RULE_COUNTS"

          # Get all unique file-rule combinations from PR branch
          awk '{print $1" "$2}' "$PR_FILE_RULE_COUNTS" | sort | uniq > pr_file_rules.txt || true

          regressions=0
          regressed_rules=""
          
          # Check each file-rule combination for count increases
          while IFS= read -r file_rule; do
            [ -z "$file_rule" ] && continue
            
            file=$(echo "$file_rule" | awk '{print $1}')
            rule=$(echo "$file_rule" | awk '{print $2}')
            
            # Get error counts for this specific file-rule combination
            main_count=$(awk -v fr="$file_rule" '$1" "$2==fr{print $3}' "$MAIN_FILE_RULE_COUNTS" | head -n1 || true)
            pr_count=$(awk -v fr="$file_rule" '$1" "$2==fr{print $3}' "$PR_FILE_RULE_COUNTS" | head -n1 || true)
            
            main_count=${main_count:-0}
            pr_count=${pr_count:-0}
            
            # Only report if this file has more errors for this rule than before
            if [ "$pr_count" -gt "$main_count" ]; then
              regressions=$((regressions+1))
              
              # Track this rule as having regressions (for summary)
              if ! echo "$regressed_rules" | grep -q -w "$rule"; then
                regressed_rules="$regressed_rules $rule"
              fi
              
              echo "============================================================"
              echo "NEW ERRORS IN FILE: $file"
              echo "Rule: $rule (main: $main_count errors -> PR: $pr_count errors)"
              echo "Rule documentation: https://docs.astral.sh/ruff/rules/$rule"
              echo ""
              echo "All $rule errors in this file:"
              
              # Show ruff errors only for this specific file and rule
              if [ -f "pr-branch/$file" ]; then
                cd pr-branch
                ruff check --preview --select "$rule" --output-format full "$file" || true
                cd ..
              else
                echo "Warning: File not found at pr-branch/$file"
              fi
              echo ""
            fi
          done < pr_file_rules.txt

          # Provide summary of regression results
          if [ "$regressions" -gt 0 ]; then
            echo "========================== REGRESSION SUMMARY =========================="
            echo "File-rule combinations with new errors: $regressions"
            echo ""
            echo "Rules that have new errors in at least one file:"
            for rule in $regressed_rules; do
              echo "  - $rule: https://docs.astral.sh/ruff/rules/$rule"
            done
            echo ""
            echo "::error::Found $regressions file-rule combinations with increased error counts"
            exit 1
          else
            echo "âœ… No new file-specific regressions detected for any rule."
          fi

      - name: Final message
        if: success()
        run: echo "Ruff per-file regression check passed - no new errors introduced."