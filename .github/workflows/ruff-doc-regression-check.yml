name: Ruff Error Count Check

on:
  pull_request:
    branches:
      - main

jobs:
  check-ruff-errors:
    runs-on: ubuntu-latest
    env:
      RULES: ANN001,ANN002,ANN003,ANN201,ANN202,ANN204,ANN205,ANN206,D102,D103,D100,D107,D105,D101,D104,D102,D103,D105,D107,D100,D101,D104,D102,D103,D105,D107,D100,D101,D104,DOC201,DOC202,DOC402,DOC501,DOC502,ANN003,ANN205,ANN206
    steps:
      - name: Checkout main branch for baseline
        uses: actions/checkout@v3
        with:
          ref: main
          path: main-branch

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          path: pr-branch

      - name: Install Ruff
        uses: astral-sh/ruff-action@v3
        with:
          args: "--version"

      - name: Detect changed Python files
        id: changed_files
        run: |
          cd pr-branch
          # Fetch main branch for comparison
          git fetch origin main:main
          # Get changed Python files between main and current branch
          changed_files=$(git diff --name-only main...HEAD | grep '\.py$' || true)
          echo "Changed Python files in this PR:"
          echo "$changed_files"
          
          # Filter to only existing files and save to file
          echo "$changed_files" | while IFS= read -r file; do
            [ -n "$file" ] && [ -f "$file" ] && echo "$file"
          done > ../changed_python_files.txt || true
          
          # Count actual existing files
          file_count=$(wc -l < ../changed_python_files.txt 2>/dev/null || echo "0")
          echo "Valid changed Python files found: $file_count"
          cat ../changed_python_files.txt || true
          echo "files_exist=$([ "$file_count" -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Run ruff on main (capture full output + per-rule stats)
        id: ruff_main
        run: |
          set -o pipefail
          cd main-branch
          # Run ruff, capture full output to file and compute per-rule stats (RULE COUNT)
          ruff check --preview --statistics --select "${RULES}" --output-format full . 2>&1 | tee ruff_main_full.txt || true
          # extract lines like: "<count> <RULE>  <message>" -> produce "RULE COUNT"
          awk '/^[[:space:]]*[0-9]+[[:space:]]+[A-Z0-9_]+/ {print $2" "$1}' ruff_main_full.txt > ruff_main_stats.txt || true
          # expose paths as step outputs for later steps
          echo "full_file=main-branch/ruff_main_full.txt" >> $GITHUB_OUTPUT
          echo "stats_file=main-branch/ruff_main_stats.txt" >> $GITHUB_OUTPUT

      - name: Run ruff on PR (capture full output + per-rule stats)
        id: ruff_pr
        run: |
          set -o pipefail
          cd pr-branch
          ruff check --preview --statistics --select "${RULES}" --output-format full . 2>&1 | tee ruff_pr_full.txt || true
          awk '/^[[:space:]]*[0-9]+[[:space:]]+[A-Z0-9_]+/ {print $2" "$1}' ruff_pr_full.txt > ruff_pr_stats.txt || true
          echo "full_file=pr-branch/ruff_pr_full.txt" >> $GITHUB_OUTPUT
          echo "stats_file=pr-branch/ruff_pr_stats.txt" >> $GITHUB_OUTPUT

      - name: Compare per-rule counts and print full PR errors for regressed rules
        run: |
          MAIN_STATS="main-branch/ruff_main_stats.txt"
          PR_STATS="pr-branch/ruff_pr_stats.txt"
          PR_FULL="pr-branch/ruff_pr_full.txt"
          CHANGED_FILES="changed_python_files.txt"

          # Ensure files exist to avoid errors
          [ -f "$MAIN_STATS" ] || touch "$MAIN_STATS"
          [ -f "$PR_STATS" ] || touch "$PR_STATS"
          [ -f "$PR_FULL" ] || touch "$PR_FULL"

          # Build union of rules seen in either run
          (cat "$MAIN_STATS" 2>/dev/null || true; cat "$PR_STATS" 2>/dev/null || true) | awk '{print $1}' | sort | uniq > all_rules.txt || true

          regressions=0
          while read -r rule; do
            [ -z "$rule" ] && continue
            base=$(awk -v r="$rule" '$1==r{print $2}' "$MAIN_STATS" | head -n1 || true)
            pr=$(awk -v r="$rule" '$1==r{print $2}' "$PR_STATS" | head -n1 || true)
            base=${base:-0}
            pr=${pr:-0}
            if [ "$pr" -gt "$base" ]; then
              regressions=$((regressions+1))
              echo "------------------------------------------------------------"
              echo "Regression detected for rule: $rule (main branch: $base -> pull request: $pr)"
              echo "More info: https://docs.astral.sh/ruff/rules/$rule"
              echo "Full PR error lines for rule $rule:"
              cd pr-branch
              
              # Check if we have valid changed files to examine
              if [ -s "../$CHANGED_FILES" ]; then
                echo "Checking only changed Python files:"
                # Use a more robust approach to handle file paths
                while IFS= read -r file; do
                  [ -n "$file" ] && [ -f "$file" ] && echo "$file"
                done < "../$CHANGED_FILES" | xargs -r ruff check --preview --select "$rule" --output-format full || true
              else
                echo "No valid changed Python files found, checking all files:"
                ruff check --preview --select "$rule" --output-format full . || true
              fi
              echo ""
            fi
          done < all_rules.txt

          if [ "$regressions" -gt 0 ]; then
            echo "::error::New per-rule regressions introduced: $regressions"
            exit 1
          else
            echo "No new per-rule regressions introduced."
          fi

      - name: Final message
        if: success()
        run: echo "Ruff per-rule regression check passed."