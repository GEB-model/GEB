###
# This section contains several general model settings.
general:
  ###
  # model start time (YYYY-MM-DD).
  start_time: 2006-01-01
  ###
  # model end time (YYYY-MM-DD).
  end_time: 2007-01-01
  # end_time: 2010-12-31
  ###
  # start of the spinup time (YYYY-MM-DD).
  spinup_start: 2000-01-01
  ###
  # base folder where to report output data to
  report_folder: DataDrive/GEB/report/
  initial_conditions_folder: DataDrive/GEB/initial
  init_water_table: DataDrive/GEB/report/init/water_table.npy
  ###
  #
  switch_crops: false
  export_inital_on_spinup: true

###
# This section can contain settings to change the behavior or the agents.
agent_settings:
  ###
  # If this setting is set to true, the farmers in the model are activated in a set order, allowing for better reproducability of the model.
  fix_activation_order: true

###
# This sections contains settings for logging of the model. 
logging:
  ###
  # The file which the logs are written to.
  logfile: GEB.log  
  ###
  # The loglevel, choose from: DEBUG, INFO, WARNING, ERROR, CRITICAL
  loglevel: DEBUG

###
# This section is only used for the visual interface. This section closely works together with the `artists`.
draw:
  ###
  # Here, you can specify which types of agents are to be drawn. In addition, you can specify options on how those agents will be drawn. These options must correspond to method arguments in the artists.
  draw_agents:
    farmers:
      draw_every_nth: 10000
  ###
  # Specify the colors and names of the crops to use here. The indices must match the indices the crop factors file (DataDrive/GEB/input/crop_data/crop_factors.csv).
  crop_data:
    0:
      name: Wheat
      color: '#006400'
    1:
      name: Maize
      color: '#808000'
    2:
      name: Rice
      color: '#808000'
    3:
      name: Barley
      color: '#483d8b'
    4:
      name: Rye
      color: '#3cb371'
    5:
      name: Millet
      color: '#008080'
    6:
      name: Sorghum
      color: '#4682b4'
    7:
      name: Soybeans
      color: '#000080'
    8:
      name: Sunflower
      color: '#9acd32'
    9:
      name: Potatoes
      color: '#b03060'
    10:
      name: Cassava
      color: '#9932cc'
    11:
      name: Sugarcane
      color: '#ff0000'
    12:
      name: Sugarbeets
      color: '#ff8c00'
    13:
      name: Oilpalm
      color: '#ffff00'
    14:
      name: Rapeseed
      color: '#0000cd'
    15:
      name: Groundnuts
      color: '#7cfc00'
    16:
      name: Pulses
      color: '#00ff7f'
    17:
      name: Citrus
      color: '#00ffff'
    18:
      name: Datepalm
      color: '#ff00ff'
    19:
      name: Grapes
      color: '#1e90ff'
    20:
      name: Cotton
      color: '#fa8072'
    21:
      name: Cocoa
      color: '#eee8aa'
    22:
      name: Coffee
      color: '#add8e6'
    23:
      name: Others perennial
      color: '#ff1493'
    24:
      name: Fodder grasses
      color: '#ee82ee'
    25:
      name: Others annual
      color: '#ffc0cb'

###
# Here, you can configure which data should be saved from the model in the `report` folder. This should be formatted as follows:
#
# - **name**: name of the folder to which the data is saved.
#
#   - **type**: agent type e.g., farmer. Should be identical to attribute name in Agents class.
#   - **function**: whether to use a function to parse the data. 'null' means the data is saved literally, 'mean' takes the mean etc. Options are given in Hyve's documentation`.
#   - **varname**: attribute name of variable in agent class.
#   - **format**: format to save to.
#   - **initial_only**: if true only save the data for the first timestep.
#   - **save**: save variable in model run, or export, or both (save/save+export/export).
report:
  activation order:
    type: farmers
    function: null
    varname: activation_order_by_elevation
    format: npy
    frequency: initial_only
    save: export
  elevation:
    type: farmers
    function: null
    varname: elevation
    format: npy
    frequency: initial_only
    save: export
  reservoir irrigation:
    type: farmers
    function: null
    varname: reservoir_abstraction_m3_by_farmer
    frequency: per_timestep
    format: npy
    save: export
  groundwater irrigation:
    type: farmers
    function: null
    varname: groundwater_abstraction_m3_by_farmer
    frequency: per_timestep
    format: npy
    save: export
  channel irrigation:
    type: farmers
    function: null
    varname: channel_abstraction_m3_by_farmer
    frequency: per_timestep
    format: npy
    save: export
  is water aware:
    type: farmers
    function: null
    varname: is_water_efficient
    frequency: per_timestep
    format: npy
    save: export
  yield ratio:
    type: farmers
    function: null
    varname: yield_ratio_per_farmer
    format: npy
    frequency: per_timestep
    save: export
  water limited days:
    type: farmers
    function: null
    varname: n_water_limited_days
    format: npy
    frequency: per_timestep
    save: export
  crop:
    type: farmers
    function: null
    varname: crop
    format: npy
    frequency: per_timestep
    save: export

###
# In this section you can configure what CWatM data is saved, such as the groundwater head in each timestep, as follows:
#
# - **name**: name of the folder to which the data is saved.
#
#   - **varname**: attribute name of CWatM data. Should be precededed by 'var.' for data from CWatM cells and 'landunit.' for data from hydrologial units..
#   - **function**: whether to use a function to parse the data. For example, 'mean' takes the mean etc. Options are 'mean', 'sum', 'nanmean' and 'nansum'.
#   - **format**: format to save to.
report_cwatm:
  hydraulic head:
    varname: data.grid.head
    function: mean
    format: csv
    save: save
  reservoir storage:
    varname: data.grid.reservoirStorageM3C
    function: sum
    format: csv
    save: save

parameters:
  soildepth_factor: 1.2357589498352997
  preferentialFlowConstant: 7.771620196341074
  SnowMeltCoef: 0.004
  arnoBeta_add: 0.4378794431106299
  factor_interflow: 1.7415262118498727
  recessionCoeff_factor: 5.08489365888276
  manningsN: 7.159801087098635
  lakeAFactor: 1.2001137835309703
  lakeEvaFactor: 1.5932766384205812
  normalStorageLimit: 0.645563228322237
  max_reservoir_release_factor: 0.03
  # SnowMeltCoef: 0.005777810112777455
  # arnoBeta_add: 0.21066975532888235
  # factor_interflow: 0.6188894074176792
  # lakeAFactor: 3.141554604609948
  # lakeEvaFactor: 2.34602890190283
  # manningsN: 1.6605011081483918
  # max_reservoir_release_factor: 0.37
  # normalStorageLimit: 0.6842538823449608
  # preferentialFlowConstant: 3.1601543505188596
  # recessionCoeff_factor: 7.542470489484948
  # soildepth_factor: 0.8256825908730563