###
# This section contains several general model settings.
general:
  ###
  # model start time (YYYY-MM-DD).
  start_time: 2005-12-31
  ###
  # model end time (YYYY-MM-DD).
  # end_time: 2010-01-01
  end_time: 2006-01-10
  ###
  # start of the spinup time (YYYY-MM-DD).
  spinup_time: 2005-12-30
  ###
  # base folder where to report output data to
  upscale_factor: 20
  basin_id: 450000005
  gauges:
    - [75.8477777, 17.41305556]
    - [75.008, 17.911]
    - [74.219, 18.545]
    - [74.000, 18.670]
    - [75.139, 17.972]
  poor_point:
    [75.895273, 17.370473]
  CWatM_settings: CWatM.ini
  input_folder: ../DataDrive/GEB_Bhima/input/
  original_data: ../DataDrive/GEB/original_data/
  preprocessing_folder: ../DataDrive/GEB_Bhima/preprocessing/
  data_folder: ../DataDrive/
  report_folder: ../report/bhima/
  initial_conditions_folder: ../calibration/bhima/runs\00_000\initial_conditions
  init_water_table: ../DataDrive/GEB_Bhima/report/init/water_table.npy
  ###
  #
  export_inital_on_spinup: true
  simulate_floods: false
  couple_plantFATE: false

###
# This section can contain settings to change the behavior or the agents.
agent_settings:
  ###
  # If this setting is set to true, the farmers in the model are activated in a set order, allowing for better reproducability of the model.
  fix_activation_order: true
  reservoir_operators:
    max_reservoir_release_factor: 0.03
    MinOutflowQ: 0.0
    NormalOutflowQ: .1
    NonDamagingOutflowQ: 4.0
  farmers:
    return_fraction: .5
    farmers_going_out_of_business: false
    well_implementation_intention_behaviour_gap: .8

calibration:
  # spinup_time: 2004-01-01
  # start_time: 2006-01-01
  # end_time: 2012-12-31
  spinup_time: 2000-01-01
  start_time: 2005-01-01
  end_time: 2011-01-03
  path: ../calibration/bhima/
  scenario: base
  monthly: true
  target_variables:
    report:
      irrigation_source:
        type: farmers
        function: null
        varname: irrigation_source
        frequency:
          every: month
          day: 1
        save: export
        format: npz
      field_size:
        type: farmers
        function: null
        varname: field_size_per_farmer
        frequency:
          every: month
          day: 1
        save: export
        format: npz
      tehsil:
        type: farmers
        function: null
        varname: tehsil
        frequency:
          every: month
          day: 1
        save: export
        format: npz

  DEAP:
    use_multiprocessing: True
    ngen: 10
    mu: 60
    lambda_: 12
    select_best: 10
    gpus: 1
    models_per_gpu: 2

  parameters:
    soildepth_factor:
        variable: parameters.soildepth_factor
        min: 0.8
        max: 1.8
    preferentialFlowConstant:
        variable: parameters.preferentialFlowConstant
        min: 0.5
        max: 8
    arnoBeta_add:
        variable: parameters.arnoBeta_add
        min: 0.01
        max: 1.0
    factor_interflow:
        variable: parameters.factor_interflow
        min: 0.33
        max: 3.0
    recessionCoeff_factor:
        variable: parameters.recessionCoeff_factor
        min: 0.05
        max: 10
    manningsN:
        variable: parameters.manningsN
        min: 0.1
        max: 10.0
    lakeAFactor:
        variable: parameters.lakeAFactor
        min: 0.333
        max: 5.0
    lakeEvaFactor:
        variable: parameters.lakeEvaFactor
        min: 0.8
        max: 3.0
    max_reservoir_release_factor:
        variable: agent_settings.reservoir_operators.max_reservoir_release_factor
        min: 0.01
        max: 0.05
    return_fraction:
        variable: agent_settings.farmers.return_fraction
        min: 0.3
        max: 0.8
    well_implementation_intention_behaviour_gap:
        variable: agent_settings.farmers.well_implementation_intention_behaviour_gap
        min: 0.0
        max: 1.0

###
# This sections contains settings for logging of the model. 
logging:
  ###
  # The file which the logs are written to.
  logfile: GEB.log  
  ###
  # The loglevel, choose from: DEBUG, INFO, WARNING, ERROR, CRITICAL
  loglevel: DEBUG

###
# This section is only used for the visual interface. This section closely works together with the `artists`.
draw:
  ###
  # Here, you can specify which types of agents are to be drawn. In addition, you can specify options on how those agents will be drawn. These options must correspond to method arguments in the artists.
  draw_agents:
    farmers:
      draw_every_nth: 100
  draw_geography:
    tehsil:
      properties:
        color: red
  ###
  # Specify the colors and names of the crops to use here. The indices must match the indices the crop factors file (../DataDrive/GEB/input/crop_data/crop_factors.csv).
  crop_data:
    0:
      name: Bajra
      color: '#e6194b'
    1:
      name: Groundnut
      color: '#3cb44b'
    2:
      name: Jowar
      color: '#ffe119'
    3:
      name: Paddy
      color: '#4363d8'
    4:
      name: Sugarcane
      color: '#f58231'
    5:
      name: Wheat
      color: '#911eb4'
    6:
      name: Cotton
      color: '#46f0f0'
    7:
      name: Gram
      color: '#f032e6'
    8:
      name: Maize
      color: '#bcf60c'
    9:
      name: Moong
      color: '#fabebe'
    10:
      name: Ragi
      color: '#008080'
    11:
      name: Sunflower
      color: '#e6beff'
    12:
      name: Tur (Arhar)
      color: '#9a6324'
###
# Here, you can configure which data should be saved from the model in the `report` folder. This should be formatted as follows:
#
# - **name**: name of the folder to which the data is saved.
#
#   - **type**: agent type e.g., farmer. Should be identical to attribute name in Agents class.
#   - **function**: whether to use a function to parse the data. 'null' means the data is saved literally, 'mean' takes the mean etc. Options are given in honeybees's documentation`.
#   - **varname**: attribute name of variable in agent class.
#   - **format**: format to save to.
#   - **initial_only**: if true only save the data for the first timestep.
#   - **save**: save variable in model run, or export, or both (save/save+export/export).
report:
  irrigation_source:
    type: farmers
    function: null
    varname: irrigation_source
    frequency:
      every: month
      day: 1
    save: export
    format: npz
  field_size:
    type: farmers
    function: null
    varname: field_size_per_farmer
    frequency:
      every: month
      day: 1
    save: export
    format: npz
  tehsil:
    type: farmers
    function: null
    varname: tehsil
    frequency:
      every: month
      day: 1
    save: export
    format: npz
  # crops_kharif:
  #   type: farmers
  #   varname: crops[:,0]
  #   function: null
  #   frequency: per_timestep
  #   save: export
  #   format: npz
  # crops_rabi:
  #   type: farmers
  #   varname: crops[:,1]
  #   function: null
  #   frequency: per_timestep
  #   save: export
  #   format: npz
  # crops_summer:
  #   type: farmers
  #   varname: crops[:,2]
  #   function: null
  #   frequency: per_timestep
  #   save: export
  #   format: npz
  # wealth_sample:
  #   type: farmers
  #   function: sample
  #   varname: wealth
  #   save: save
  #   format: csv
  activation order:
    type: farmers
    function: null
    varname: activation_order_by_elevation
    format: npz
    frequency: initial
    save: export
  # reservoir irrigation:
  #   type: farmers
  #   function: null
  #   varname: reservoir_abstraction_m3_by_farmer
  #   frequency: per_timestep
  #   format: npz
  #   save: export
  # groundwater irrigation:
  #   type: farmers
  #   function: null
  #   varname: groundwater_abstraction_m3_by_farmer
  #   frequency: per_timestep
  #   format: npz
  #   save: export
  # channel irrigation:
  #   type: farmers
  #   function: null
  #   varname: channel_abstraction_m3_by_farmer
  #   frequency: per_timestep
  #   format: npz
  #   save: export
  # groundwater depth:
  #   type: farmers
  #   function: null
  #   varname: groundwater_depth
  #   frequency: per_timestep
  #   format: npz
  #   save: export
  # profit:
  #   type: farmers
  #   function: null
  #   varname: profit_per_farmer
  #   frequency: per_timestep
  #   format: npz
  #   save: export

###
# In this section you can configure what CWatM data is saved, such as the groundwater head in each timestep, as follows:
#
# - **name**: name of the folder to which the data is saved.
#
#   - **varname**: attribute name of CWatM data. Should be precededed by 'var.' for data from CWatM cells and 'HRU.' for data from hydrologial units..
#   - **function**: whether to use a function to parse the data. For example, 'mean' takes the mean etc. Options are 'mean', 'sum', 'nanmean' and 'nansum'.
#   - **format**: format to save to.
report_cwatm:
  hydraulic head:
    varname: data.grid.head
    function: mean
    format: csv
    save: save
  reservoir storage:
    varname: data.grid.reservoirStorageM3C
    function: sum
    format: csv
    save: save
  discharge:
    varname: data.grid.discharge
    function: sample,25,54
    format: csv
    save: save

parameters:
  SnowMeltCoef: 0.004
  arnoBeta_add: 0.6653797014119323
  factor_interflow: 1.6896506245793668
  lakeAFactor: 3.1051495676629
  lakeEvaFactor: 2.6777823102359894
  manningsN: 0.8269807271111366
  normalStorageLimit: 0.645563228322237
  preferentialFlowConstant: 3.14300925049279
  recessionCoeff_factor: 2.7889874934367804
  soildepth_factor: 1.036953064771858
