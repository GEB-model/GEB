###
# This section contains several general model settings.
general:
  ###
  # model start time (YYYY-MM-DD).
  start_time: 2006-01-01
  ###
  # model end time (YYYY-MM-DD).
  # end_time: 2010-01-01
  end_time: 2018-12-31
  ###
  # start of the spinup time (YYYY-MM-DD).
  spinup_start: 2005-01-01
  ###
  # base folder where to report output data to
  upscale_factor: 20
  basin_id: 450000005
  gauges:
    lon: 80.0731
    lat: 16.7942
  CWatM_settings: CWatM.ini
  input_folder: ../DataDrive/GEB_Krishna/input/
  original_data: ../DataDrive/GEB/original_data/
  data_folder: ../DataDrive/
  report_folder: report/krishna/
  initial_conditions_folder: ../DataDrive/GEB_Krishna/initial
  init_water_table: ../DataDrive/GEB_Krishna/report/init/water_table.npy
  ###
  #
  export_inital_on_spinup: true

###
# This section can contain settings to change the behavior or the agents.
agent_settings:
  ###
  # If this setting is set to true, the farmers in the model are activated in a set order, allowing for better reproducability of the model.
  fix_activation_order: true
  reservoir_operators:
    max_reservoir_release_factor: 0.03
    MinOutflowQ: 0.0
    NormalOutflowQ: .1
    NonDamagingOutflowQ: 4.0
  farmers:
    return_fraction: .5

calibration:
  spinup_start: 2010-06-01
  start_date: 2010-07-01
  end_date: 2010-07-10
  # end_date: 2015-07-01
  path: ../DataDrive/GEB_Krishna/calibration/
  gpus: 0
  monthly: false

  observations:
    discharge:
      path: calibration/data/observations.csv
      column: flow

  options:
    define_first_run: False

  DEAP:
    use_multiprocessing: False
    ngen: 3 # 10
    mu: 5 # 120
    lambda_: 3 # 24
    select_best: 3

  parameters:
    soildepth_factor:
        variable: parameters.soildepth_factor
        min: 0.8
        max: 1.8
    preferentialFlowConstant:
        variable: parameters.preferentialFlowConstant
        min: 0.5
        max: 8
    arnoBeta_add:
        variable: parameters.arnoBeta_add
        min: 0.01
        max: 1.0
    factor_interflow:
        variable: parameters.factor_interflow
        min: 0.33
        max: 3.0
    recessionCoeff_factor:
        variable: parameters.recessionCoeff_factor
        min: 0.05
        max: 10
    manningsN:
        variable: parameters.manningsN
        min: 0.1
        max: 10.0
    lakeAFactor:
        variable: parameters.lakeAFactor
        min: 0.333
        max: 5.0
    lakeEvaFactor:
        variable: parameters.lakeEvaFactor
        min: 0.8
        max: 3.0
    max_reservoir_release_factor:
        variable: agent_settings.reservoir_operators.max_reservoir_release_factor
        min: 0.01
        max: 0.05
    return_fraction:
        variable: agent_settings.farmers.return_fraction
        min: 0.3
        max: 0.8

###
# This sections contains settings for logging of the model. 
logging:
  ###
  # The file which the logs are written to.
  logfile: GEB.log  
  ###
  # The loglevel, choose from: DEBUG, INFO, WARNING, ERROR, CRITICAL
  loglevel: DEBUG

###
# This section is only used for the visual interface. This section closely works together with the `artists`.
draw:
  ###
  # Here, you can specify which types of agents are to be drawn. In addition, you can specify options on how those agents will be drawn. These options must correspond to method arguments in the artists.
  draw_agents:
    farmers:
      draw_every_nth: 1
  draw_geography:
    tehsil:
      properties:
        color: red
  ###
  # Specify the colors and names of the crops to use here. The indices must match the indices the crop factors file (../DataDrive/GEB/input/crop_data/crop_factors.csv).
  crop_data:
    0:
      name: Bajra
      color: '#006400'
    1:
      name: Groundnut
      color: '#808000'
    2:
      name: Jowar
      color: '#808000'
    3:
      name: Paddy
      color: '#483d8b'
    4:
      name: Sugarcane
      color: '#3cb371'
    5:
      name: Tomato
      color: '#008080'
    6:
      name: Wheat
      color: '#4682b4'

###
# Here, you can configure which data should be saved from the model in the `report` folder. This should be formatted as follows:
#
# - **name**: name of the folder to which the data is saved.
#
#   - **type**: agent type e.g., farmer. Should be identical to attribute name in Agents class.
#   - **function**: whether to use a function to parse the data. 'null' means the data is saved literally, 'mean' takes the mean etc. Options are given in honeybees's documentation`.
#   - **varname**: attribute name of variable in agent class.
#   - **format**: format to save to.
#   - **initial_only**: if true only save the data for the first timestep.
#   - **save**: save variable in model run, or export, or both (save/save+export/export).
report:
  # crop_sample:
  #   type: farmers
  #   function: sample
  #   varname: crop
  #   save: save
  #   format: csv
  irrigated_per_district:
    type: farmers
    function: mean
    varname: irrigated
    save: save
    format: csv
    groupby: tehsil
  crops_per_district:
    type: farmers
    function: groupcount,0,1
    varname: crops
    save: save
    format: csv
    groupby: tehsil
  # well_irrigated_sample:
  #   type: farmers
  #   function: sample
  #   varname: well_irrigated
  #   save: save
  #   format: csv
  # wealth_sample:
  #   type: farmers
  #   function: sample
  #   varname: wealth
  #   save: save
  #   format: csv
  # activation order:
  #   type: farmers
  #   function: null
  #   varname: activation_order_by_elevation
  #   format: npy
  #   frequency: initial_only
  #   save: export
  # reservoir irrigation:
  #   type: farmers
  #   function: null
  #   varname: reservoir_abstraction_m3_by_farmer
  #   frequency: per_timestep
  #   format: npy
  #   save: export
  # groundwater irrigation:
  #   type: farmers
  #   function: null
  #   varname: groundwater_abstraction_m3_by_farmer
  #   frequency: per_timestep
  #   format: npy
  #   save: export
  # channel irrigation:
  #   type: farmers
  #   function: null
  #   varname: channel_abstraction_m3_by_farmer
  #   frequency: per_timestep
  #   format: npy
  #   save: export
  # is water aware:
  #   type: farmers
  #   function: sum
  #   varname: is_water_efficient
  #   frequency: per_timestep
  #   format: csv
  #   save: save
  # crop:
  #   type: farmers
  #   function: null
  #   varname: crop
  #   format: npy
  #   frequency: per_timestep
  #   save: export

###
# In this section you can configure what CWatM data is saved, such as the groundwater head in each timestep, as follows:
#
# - **name**: name of the folder to which the data is saved.
#
#   - **varname**: attribute name of CWatM data. Should be precededed by 'var.' for data from CWatM cells and 'HRU.' for data from hydrologial units..
#   - **function**: whether to use a function to parse the data. For example, 'mean' takes the mean etc. Options are 'mean', 'sum', 'nanmean' and 'nansum'.
#   - **format**: format to save to.
report_cwatm:
  hydraulic head:
    varname: data.grid.head
    function: mean
    format: csv
    save: save
  reservoir storage:
    varname: data.grid.reservoirStorageM3C
    function: sum
    format: csv
    save: save
  discharge:
    varname: data.grid.discharge
    function: sample,25,54
    format: csv
    save: save

parameters:
  SnowMeltCoef: 0.004
  arnoBeta_add: 0.18781855039414305
  factor_interflow: 1.5507514321846023
  lakeAFactor: 0.8654560453843747
  lakeEvaFactor: 1.471582423324509
  manningsN: 2.058737439843661
  normalStorageLimit: 0.645563228322237
  preferentialFlowConstant: 6.1010022638948005
  recessionCoeff_factor: 6.959587883563559
  soildepth_factor: 1.1880513031716229